// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"github.com/BoskyWSMFN/go-lesson-multithreading-architecture/internal/architecture/cleanarch"
	"sync"
)

// UserRepositoryMock is a mock implementation of cleanarch.UserRepository.
//
//	func TestSomethingThatUsesUserRepository(t *testing.T) {
//
//		// make and configure a mocked cleanarch.UserRepository
//		mockedUserRepository := &UserRepositoryMock{
//			LookupFunc: func(id int64) (cleanarch.User, error) {
//				panic("mock out the Lookup method")
//			},
//			StoreFunc: func(user cleanarch.User) (int64, error) {
//				panic("mock out the Store method")
//			},
//		}
//
//		// use mockedUserRepository in code that requires cleanarch.UserRepository
//		// and then make assertions.
//
//	}
type UserRepositoryMock struct {
	// LookupFunc mocks the Lookup method.
	LookupFunc func(id int64) (cleanarch.User, error)

	// StoreFunc mocks the Store method.
	StoreFunc func(user cleanarch.User) (int64, error)

	// calls tracks calls to the methods.
	calls struct {
		// Lookup holds details about calls to the Lookup method.
		Lookup []struct {
			// ID is the id argument value.
			ID int64
		}
		// Store holds details about calls to the Store method.
		Store []struct {
			// User is the user argument value.
			User cleanarch.User
		}
	}
	lockLookup sync.RWMutex
	lockStore  sync.RWMutex
}

// Lookup calls LookupFunc.
func (mock *UserRepositoryMock) Lookup(id int64) (cleanarch.User, error) {
	callInfo := struct {
		ID int64
	}{
		ID: id,
	}
	mock.lockLookup.Lock()
	mock.calls.Lookup = append(mock.calls.Lookup, callInfo)
	mock.lockLookup.Unlock()
	if mock.LookupFunc == nil {
		var (
			userOut cleanarch.User
			errOut  error
		)
		return userOut, errOut
	}
	return mock.LookupFunc(id)
}

// LookupCalls gets all the calls that were made to Lookup.
// Check the length with:
//
//	len(mockedUserRepository.LookupCalls())
func (mock *UserRepositoryMock) LookupCalls() []struct {
	ID int64
} {
	var calls []struct {
		ID int64
	}
	mock.lockLookup.RLock()
	calls = mock.calls.Lookup
	mock.lockLookup.RUnlock()
	return calls
}

// Store calls StoreFunc.
func (mock *UserRepositoryMock) Store(user cleanarch.User) (int64, error) {
	callInfo := struct {
		User cleanarch.User
	}{
		User: user,
	}
	mock.lockStore.Lock()
	mock.calls.Store = append(mock.calls.Store, callInfo)
	mock.lockStore.Unlock()
	if mock.StoreFunc == nil {
		var (
			nOut   int64
			errOut error
		)
		return nOut, errOut
	}
	return mock.StoreFunc(user)
}

// StoreCalls gets all the calls that were made to Store.
// Check the length with:
//
//	len(mockedUserRepository.StoreCalls())
func (mock *UserRepositoryMock) StoreCalls() []struct {
	User cleanarch.User
} {
	var calls []struct {
		User cleanarch.User
	}
	mock.lockStore.RLock()
	calls = mock.calls.Store
	mock.lockStore.RUnlock()
	return calls
}
